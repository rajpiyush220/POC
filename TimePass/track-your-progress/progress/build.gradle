plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
	id "com.diffplug.spotless" version "6.9.0"
	id 'com.github.sherter.google-java-format' version '0.9'
}

group = 'com.touch.blankspot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation project('common')
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.1'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
	implementation 'org.mapstruct:mapstruct:1.5.2.Final'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	annotationProcessor(
			'org.projectlombok:lombok',
			'org.mapstruct:mapstruct-processor:1.5.2.Final'
	)

	testAnnotationProcessor(
			'org.projectlombok:lombok',
			'org.mapstruct:mapstruct-processor:1.5.2.Final',
	)

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task prefixNewMigrations {
	fileTree(dir:'src/main/resources/db/migration').exclude({ isFileOldPrefix(it.file) || isFilePrefixed(it.file) }).each {file ->
		doLast {
			def timestamp = new Date().format('yyyyMMdddHHmmssSSSS', TimeZone.getTimeZone('GMT'))
			def name = "${file.name}".replaceAll('(?:V1)?_\\d+__','')
			file.renameTo("$file.parentFile.absolutePath$file.separator${'V2_' + timestamp}__${name}")
			sleep(1000)
		}
	}
}

static def isFilePrefixed(file){
	// return (file.name ==~ "^V(\\d+)_\\d{17}__.*\\.sql\$")
	// this need to replaced with regex check
	return file.name.startsWith("V")
}

static def isFileOldPrefix(file){
	// return (file.name ==~ "^V1_(?:[0-9]|1[0-9]|2[0-8])__.*\\.sql\$")
	// this need to replaced with regex check
	return file.name.startsWith("V1__")
}

spotless {
	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat()
		prettier()
		formatAnnotations()
	}
}
