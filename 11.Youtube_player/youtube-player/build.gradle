plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.touchblankspot'
version = '1.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor(
            'org.projectlombok:lombok',
            'org.mapstruct:mapstruct-processor:1.5.3.Final'
    )
    testAnnotationProcessor(
            'org.projectlombok:lombok',
            'org.mapstruct:mapstruct-processor:1.5.3.Final',
    )
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.register('prefixNewMigrations') {
    fileTree(dir: 'src/main/resources/db/migration').exclude({ isFileOldPrefix(it.file) || isFilePrefixed(it.file) }).each { file ->
        doLast {
            def timestamp = new Date().format('yyyyMMdddHHmmssSSSS', TimeZone.getTimeZone('GMT'))
            def name = "${file.name}".replaceAll('(?:V1)?_\\d+__', '')
            file.renameTo("$file.parentFile.absolutePath$file.separator${'V2_' + timestamp}__${name}")
            sleep(1000)
        }
    }
}

static def isFilePrefixed(file){
    return file.name.startsWith("V")
}

static def isFileOldPrefix(file){
    return file.name.startsWith("V1__")
}


tasks.named('test') {
    useJUnitPlatform()
}
